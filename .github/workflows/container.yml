---

name: Container Workflow template"

on:
  workflow_call:
    secrets:
      BOT_ACCESS_TOKEN:
        description: 'The GitHub token for the bot account'
        required: true
      QUAY_USER:
        description: 'The username for the Quay account'
        required: false
      QUAY_TOKEN:
        description: 'The token for the Quay account'
        required: false
      MONDOO_SERVICE_ACCOUNT:
        description: 'The service account for the Mondo service'
        required: false
      DOCKER_USER:
        description: 'The username for the docker hub account'
        required: false
      DOCKER_TOKEN:
        description: 'The token for the docker user account'
        required: false
    inputs:
      release:
        description: 'also run release workflow'
        required: false
        type: boolean
        default: false
      dockerfile:
        description: 'The path to the Dockerfile'
        required: true
        type: string
        default: 'Dockerfile'
      score:
        description: 'The score threshold for the image'
        required: false
        type: number
        default: 60
      platforms:
        description: 'The platforms to build for'
        required: false
        type: string
        default: 'linux/amd64'
      image_name:
        description: 'The name of the image'
        required: false
        type: string
        default: ''
      build_args:
        description: 'The build arguments for the image'
        required: false
        type: string
        default: ''
      ghcr:
        type: boolean
        default: true
        required: false

env:
  MONDOO_CONFIG_BASE64: ${{ secrets.MONDOO_SERVICE_ACCOUNT }}
  QUAY_USER: ${{ secrets.QUAY_USER }}
  DOCKER_USER: ${{ secrets.DOCKER_USER }}
  BOT_ACCESS_TOKEN: ${{ secrets.BOT_ACCESS_TOKEN }}

jobs:

  pre-commit:
    uses: ./.github/workflows/pre-commit.yml
    secrets:
      BOT_ACCESS_TOKEN: ${{ secrets.BOT_ACCESS_TOKEN }}

  build:
    runs-on: ubuntu-latest
    needs: [pre-commit]
    steps:
    - uses: actions/checkout@v4

    - uses: go-semantic-release/action@v1
      id: semrel
      with:
        github-token: ${{ secrets.BOT_ACCESS_TOKEN }}
        prepend: true
        dry: true

    - name: Get directory of ${{ inputs.dockerfile }}
      id: get_dir
      run: |
        echo "docker_directory=$(dirname ${{ inputs.dockerfile }})" >> $GITHUB_OUTPUT

    - name: Prepare tagging
      id: prep
      run: |
        name="$(basename ${{ github.repository }})"
        if [[ -n "${{ inputs.image_name }}" ]]; then
          name="$( basename '${{ inputs.image_name }}')"
        fi
        repo=${{ github.repository_owner }}
        if [[ -n "${{ inputs.image_name }}" ]] && [[ "${name}" != "${{ inputs.image_name}}" ]]; then
          repo="$( dirname '${{ inputs.image_name }}')"
        fi


        IMAGE_NAME="${repo}/${name}"

        echo 'tags<<EOF' >> $GITHUB_OUTPUT
        echo "type=semver,pattern={{version}},value=${{ needs.pre-commit.outputs.version }}" >> $GITHUB_OUTPUT
        echo "type=schedule,pattern=nightly" >> $GITHUB_OUTPUT
        echo "type=ref,enable=true,priority=600,prefix=pr-,suffix=,event=pr" >> $GITHUB_OUTPUT
        echo 'EOF' >> $GITHUB_OUTPUT

        echo 'images<<EOF' >> $GITHUB_OUTPUT
        echo "name=ghcr.io/${IMAGE_NAME},enable=${{ inputs.ghcr }}" >> $GITHUB_OUTPUT
        echo "name=quay.io/${IMAGE_NAME},enable=$( [[ -n "${{ secrets.QUAY_TOKEN }}" ]] && echo "true" || echo "false" )" >> $GITHUB_OUTPUT
        echo "name=docker.io/${IMAGE_NAME},enable=$( [[ -n "${{ secrets.DOCKER_TOKEN }}" ]] && echo "true" || echo "false" )" >> $GITHUB_OUTPUT
        echo 'EOF' >> $GITHUB_OUTPUT

    - name: Login to Dockerhub
      if: needs.pre-commit.outputs.version != '' && env.DOCKER_USER != ''
      uses: docker/login-action@v3
      with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}

    - name: Login to Quay
      if: needs.pre-commit.outputs.version != '' && env.QUAY_USER != ''
      uses: docker/login-action@v3
      with:
          registry: quay.io
          username: ${{ secrets.QUAY_USER }}
          password: ${{ secrets.QUAY_TOKEN }}

    - name: Login to GitHub Container Registry
      if: needs.pre-commit.outputs.version != '' && env.BOT_ACCESS_TOKEN != ''
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.BOT_ACCESS_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.prep.outputs.images }}
        tags: ${{ steps.prep.outputs.tags }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Container Image
      id: docker_build
      uses: docker/build-push-action@v6
      with:
        push: false
        load: true
        context: ${{ steps.get_dir.outputs.docker_directory }}
        file: ${{ inputs.dockerfile }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: ${{ inputs.build_args }}

    - name: Scan Docker Image
      if: env.MONDOO_CONFIG_BASE64 != '' && inputs.score > 0
      uses: mondoohq/actions/docker-image@v11.0.0
      with:
          image: ${{ fromJson(steps.meta.outputs.json).tags[0] }}
          score-threshold: ${{ inputs.score }}

    - name: Publish container
      if: ${{ github.event_name != 'pull_request' && needs.pre-commit.outputs.version != '' }}
      id: docker_publish
      uses: docker/build-push-action@v6
      with:
        push: true
        load: false
        context: ${{ steps.get_dir.outputs.docker_directory }}
        file: ${{ inputs.dockerfile }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: ${{ inputs.build_args }}
        platforms: ${{ inputs.platforms }}

  release:
    needs: [ pre-commit, build ]
    if: inputs.release && github.event_name != 'pull_request'
    uses: ./.github/workflows/release.yml
    secrets:
      BOT_ACCESS_TOKEN: ${{ secrets.BOT_ACCESS_TOKEN }}
